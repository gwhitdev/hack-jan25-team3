import type { TransportResponse } from './model';
export declare class TransportError<T> extends Error {
    readonly status: number;
    readonly details?: T | undefined;
    constructor(message: string, status: number, details?: T | undefined);
}
export declare class BadRequestError<T> extends TransportError<T> {
    constructor(message?: string, details?: T);
}
export declare class UnauthorizedError<T> extends TransportError<T> {
    constructor(message?: string, details?: T);
}
export declare class PaymentRequiredError<T> extends TransportError<T> {
    constructor(message?: string, details?: T);
}
export declare class ForbiddenError<T> extends TransportError<T> {
    constructor(message?: string, details?: T);
}
export declare class NotFoundError<T> extends TransportError<T> {
    constructor(message?: string, details?: T);
}
export declare class InternalServerError<T> extends TransportError<T> {
    constructor(message?: string, details?: T);
}
export declare class BadGatewayError<T> extends TransportError<T> {
    constructor(message?: string, details?: T);
}
export declare class ServiceUnavailableError<T> extends TransportError<T> {
    constructor(message?: string, details?: T);
}
export declare class GatewayTimeoutError<T> extends TransportError<T> {
    constructor(message?: string, details?: T);
}
export declare function errorHandler<T>(response: TransportResponse<T>): TransportResponse<T>;
